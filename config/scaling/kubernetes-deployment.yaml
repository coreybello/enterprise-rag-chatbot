# Kubernetes Deployment Configuration for RAG System

apiVersion: v1
kind: Namespace
metadata:
  name: rag-system
  labels:
    name: rag-system

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: rag-config
  namespace: rag-system
data:
  redis_url: "redis://redis-service:6379"
  log_level: "INFO"
  worker_port: "8000"
  cache_ttl: "3600"
  max_documents: "1000"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: rag-secrets
  namespace: rag-system
type: Opaque
data:
  # Base64 encoded values
  api_key: "your-api-key-base64"
  database_password: "your-db-password-base64"

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: rag-system
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server"]
        args: ["--appendonly", "yes", "--maxmemory", "512mb", "--maxmemory-policy", "allkeys-lru"]
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          limits:
            memory: "1Gi"
            cpu: "500m"
          requests:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: rag-system
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Redis PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: rag-system
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# RAG Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rag-worker
  namespace: rag-system
  labels:
    app: rag-worker
spec:
  replicas: 3
  selector:
    matchLabels:
      app: rag-worker
  template:
    metadata:
      labels:
        app: rag-worker
    spec:
      containers:
      - name: rag-worker
        image: rag-system:latest
        ports:
        - containerPort: 8000
        env:
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: redis_url
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: log_level
        - name: WORKER_PORT
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: worker_port
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: rag-secrets
              key: api_key
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: cache-volume
          mountPath: /app/cache
        - name: data-volume
          mountPath: /app/data
        resources:
          limits:
            memory: "4Gi"
            cpu: "2000m"
          requests:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]  # Graceful shutdown
      volumes:
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: data-volume
        persistentVolumeClaim:
          claimName: rag-data-pvc
      terminationGracePeriodSeconds: 30

---
# RAG Worker Service
apiVersion: v1
kind: Service
metadata:
  name: rag-worker-service
  namespace: rag-system
  labels:
    app: rag-worker
spec:
  selector:
    app: rag-worker
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
# RAG Data PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rag-data-pvc
  namespace: rag-system
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 100Gi

---
# Load Balancer (Nginx)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-lb
  namespace: rag-system
  labels:
    app: nginx-lb
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-lb
  template:
    metadata:
      labels:
        app: nginx-lb
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        - containerPort: 443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: ssl-certs
          mountPath: /etc/nginx/ssl
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: ssl-certs
        secret:
          secretName: ssl-certs

---
# Nginx ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: rag-system
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    http {
        upstream rag_workers {
            server rag-worker-service:8000;
        }
        server {
            listen 80;
            location /health {
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            location / {
                proxy_pass http://rag_workers;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
    }

---
# Nginx Load Balancer Service
apiVersion: v1
kind: Service
metadata:
  name: nginx-lb-service
  namespace: rag-system
  labels:
    app: nginx-lb
spec:
  selector:
    app: nginx-lb
  ports:
  - name: http
    port: 80
    targetPort: 80
  - name: https
    port: 443
    targetPort: 443
  type: LoadBalancer

---
# Horizontal Pod Autoscaler for RAG Workers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rag-worker-hpa
  namespace: rag-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rag-worker
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
# Performance Monitor Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: performance-monitor
  namespace: rag-system
  labels:
    app: performance-monitor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: performance-monitor
  template:
    metadata:
      labels:
        app: performance-monitor
    spec:
      containers:
      - name: performance-monitor
        image: rag-monitor:latest
        ports:
        - containerPort: 9090
        env:
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: redis_url
        - name: MONITOR_INTERVAL
          value: "30"
        volumeMounts:
        - name: monitor-data
          mountPath: /app/data
        resources:
          limits:
            memory: "1Gi"
            cpu: "500m"
          requests:
            memory: "512Mi"
            cpu: "250m"
      volumes:
      - name: monitor-data
        persistentVolumeClaim:
          claimName: monitor-pvc

---
# Performance Monitor Service
apiVersion: v1
kind: Service
metadata:
  name: performance-monitor-service
  namespace: rag-system
  labels:
    app: performance-monitor
spec:
  selector:
    app: performance-monitor
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP

---
# Monitor PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: monitor-pvc
  namespace: rag-system
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rag-network-policy
  namespace: rag-system
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: rag-system
    - podSelector: {}
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: rag-system
    - podSelector: {}
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# ServiceMonitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: rag-system-monitor
  namespace: rag-system
  labels:
    app: rag-system
spec:
  selector:
    matchLabels:
      app: rag-worker
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics