# Docker Compose Configuration for Horizontal Scaling
version: '3.8'

services:
  # Redis for caching and service discovery
  redis:
    image: redis:7-alpine
    container_name: rag_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - rag_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load balancer (Nginx)
  load_balancer:
    image: nginx:alpine
    container_name: rag_load_balancer
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - rag_worker_1
      - rag_worker_2
    networks:
      - rag_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RAG Workers
  rag_worker_1:
    build:
      context: ../..
      dockerfile: Dockerfile
    container_name: rag_worker_1
    environment:
      - WORKER_ID=worker_1
      - REDIS_URL=redis://redis:6379
      - WORKER_PORT=8001
      - LOG_LEVEL=INFO
    ports:
      - "8001:8001"
    volumes:
      - ../../src:/app/src
      - ../../data:/app/data
      - worker_1_cache:/app/cache
    depends_on:
      - redis
    networks:
      - rag_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  rag_worker_2:
    build:
      context: ../..
      dockerfile: Dockerfile
    container_name: rag_worker_2
    environment:
      - WORKER_ID=worker_2
      - REDIS_URL=redis://redis:6379
      - WORKER_PORT=8002
      - LOG_LEVEL=INFO
    ports:
      - "8002:8002"
    volumes:
      - ../../src:/app/src
      - ../../data:/app/data
      - worker_2_cache:/app/cache
    depends_on:
      - redis
    networks:
      - rag_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Performance Monitor
  performance_monitor:
    build:
      context: ../..
      dockerfile: Dockerfile.monitor
    container_name: rag_performance_monitor
    environment:
      - REDIS_URL=redis://redis:6379
      - MONITOR_INTERVAL=30
      - LOG_LEVEL=INFO
    ports:
      - "9090:9090"
    volumes:
      - ../../src:/app/src
      - monitor_data:/app/data
    depends_on:
      - redis
    networks:
      - rag_network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: rag_prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - rag_network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rag_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - rag_network
    restart: unless-stopped

volumes:
  redis_data:
  worker_1_cache:
  worker_2_cache:
  monitor_data:
  prometheus_data:
  grafana_data:

networks:
  rag_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16